{
    "scope": "meta.name.interpolated.hash - string, source.cfscript - source.sql - text.html.cfm - string - meta - comment, source.cfscript.embedded.cfml - string, source.sql, text, source.cfml.script, embedding.cfml",
    "completions":
    [
	{ "trigger": "addAssertions\tfn. (ColdBox BaseSpec)", "contents": "addAssertions( assertions=${1:any} )" },
	{ "trigger": "addMatchers\tfn. (ColdBox BaseSpec)", "contents": "addMatchers( matchers=${1:any} )" },
	{ "trigger": "afterEach\tfn. (ColdBox BaseSpec)", "contents": "afterEach( body=${1:any} )" },
	{ "trigger": "aroundEach\tfn. (ColdBox BaseSpec)", "contents": "aroundEach( body=${1:any} )" },
	{ "trigger": "aroundStub\tfn. (ColdBox BaseSpec)", "contents": "aroundStub( spec=${1:any} )" },
	{ "trigger": "assert\tfn. (ColdBox BaseSpec)", "contents": "assert( expression=${1:any}, message=${2:any} )" },
	{ "trigger": "beforeEach\tfn. (ColdBox BaseSpec)", "contents": "beforeEach( body=${1:any} )" },
	{ "trigger": "clearDebugBuffer\tfn. (ColdBox BaseSpec)", "contents": "clearDebugBuffer()" },
	{ "trigger": "closureStub\tfn. (ColdBox BaseSpec)", "contents": "closureStub()" },
	{ "trigger": "console\tfn. (ColdBox BaseSpec)", "contents": "console( var=${1:any}, top=${2:any} )" },
	{ "trigger": "createEmptyMock\tfn. (ColdBox BaseSpec)", "contents": "createEmptyMock( className=\"${1:}\", object=${2:any}, callLogging=${3:true,false} )" },
	{ "trigger": "createMock\tfn. (ColdBox BaseSpec)", "contents": "createMock( className=\"${1:}\", object=${2:any}, clearMethods=${3:true,false} )" },
	{ "trigger": "createStub\tfn. (ColdBox BaseSpec)", "contents": "createStub( callLogging=${1:true,false}, extends=\"${2:}\", implements=\"${3:}\" )" },
	{ "trigger": "debug\tfn. (ColdBox BaseSpec)", "contents": "debug( var=${1:any}, label=\"${2:}\", deepCopy=${3:true,false}, top=${4:numeric} )" },
	{ "trigger": "describe\tfn. (ColdBox BaseSpec)", "contents": "describe( title=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )" },
	{ "trigger": "expect\tfn. (ColdBox BaseSpec)", "contents": "expect( actual=${1:any} )" },
	{ "trigger": "expectedException\tfn. (ColdBox BaseSpec)", "contents": "expectedException( type=${1:any}, regex=${2:any} )" },
	{ "trigger": "fail\tfn. (ColdBox BaseSpec)", "contents": "fail( message=${1:any} )" },
	{ "trigger": "feature\tfn. (ColdBox BaseSpec)", "contents": "feature( feature=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )" },
	{ "trigger": "generateAroundEachClosuresStack\tfn. (ColdBox BaseSpec)", "contents": "generateAroundEachClosuresStack( closures=${1:[]}, suite=${2:any}, spec=${3:any} )" },
	{ "trigger": "getDebugBuffer\tfn. (ColdBox BaseSpec)", "contents": "getDebugBuffer()" },
	{ "trigger": "getMockBox\tfn. (ColdBox BaseSpec)", "contents": "getMockBox( generationPath=\"${1:}\" )" },
	{ "trigger": "getProperty\tfn. (ColdBox BaseSpec)", "contents": "getProperty( target=${1:any}, name=${2:any}, scope=${3:any}, defaultValue=${4:any} )" },
	{ "trigger": "given\tfn. (ColdBox BaseSpec)", "contents": "given( given=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )" },
	{ "trigger": "hasExpectedException\tfn. (ColdBox BaseSpec)", "contents": "hasExpectedException( specName=${1:any}, runner=${2:any} )" },
	{ "trigger": "isExpectedException\tfn. (ColdBox BaseSpec)", "contents": "isExpectedException( exception=${1:any}, specName=${2:any}, runner=${3:any} )" },
	{ "trigger": "it\tfn. (ColdBox BaseSpec)", "contents": "it( title=\"${1:}\", body=${2:any}, labels=${3:any}, skip=${4:any}, data=${5:{}} )" },
	{ "trigger": "makePublic\tfn. (ColdBox BaseSpec)", "contents": "makePublic( target=${1:any}, method=\"${2:}\", newName=\"${3:}\" )" },
	{ "trigger": "prepareMock\tfn. (ColdBox BaseSpec)", "contents": "prepareMock( object=${1:any}, callLogging=${2:true,false} )" },
	{ "trigger": "print\tfn. (ColdBox BaseSpec)", "contents": "print( message=${1:any} )" },
	{ "trigger": "println\tfn. (ColdBox BaseSpec)", "contents": "println( message=${1:any} )" },
	{ "trigger": "querySim\tfn. (ColdBox BaseSpec)", "contents": "querySim( queryData=${1:any} )" },
	{ "trigger": "runAfterEachClosures\tfn. (ColdBox BaseSpec)", "contents": "runAfterEachClosures( suite=${1:any}, spec=${2:any} )" },
	{ "trigger": "runAroundEachClosures\tfn. (ColdBox BaseSpec)", "contents": "runAroundEachClosures( suite=${1:any}, spec=${2:any} )" },
	{ "trigger": "runBeforeEachClosures\tfn. (ColdBox BaseSpec)", "contents": "runBeforeEachClosures( suite=${1:any}, spec=${2:any} )" },
	{ "trigger": "runRemote\tfn. (ColdBox BaseSpec)", "contents": "runRemote( testSpecs=\"${1:}\", testSuites=\"${2:}\", reporter=\"${3:}\", labels=\"${4:}\" )" },
	{ "trigger": "runSpec\tfn. (ColdBox BaseSpec)", "contents": "runSpec( spec=${1:any}, suite=${2:any}, testResults=${3:any}, suiteStats=${4:any}, runner=${5:any} )" },
	{ "trigger": "runTestMethod\tfn. (ColdBox BaseSpec)", "contents": "runTestMethod( spec=${1:any}, testResults=${2:any}, suiteStats=${3:any}, runner=${4:any} )" },
	{ "trigger": "scenario\tfn. (ColdBox BaseSpec)", "contents": "scenario( scenario=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )" },
	{ "trigger": "sliceTagContext\tfn. (ColdBox BaseSpec)", "contents": "sliceTagContext( tagContext=${1:any} )" },
	{ "trigger": "story\tfn. (ColdBox BaseSpec)", "contents": "story( story=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )" },
	{ "trigger": "then\tfn. (ColdBox BaseSpec)", "contents": "then( then=\"${1:}\", body=${2:any}, labels=${3:any}, skip=${4:any}, data=${5:{}} )" },
	{ "trigger": "when\tfn. (ColdBox BaseSpec)", "contents": "when( when=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false}, skip=${5:any} )" },
	{ "trigger": "xdescribe\tfn. (ColdBox BaseSpec)", "contents": "xdescribe( title=\"${1:}\", body=${2:any}, labels=${3:any}, asyncAll=${4:true,false} )" },
	{ "trigger": "xit\tfn. (ColdBox BaseSpec)", "contents": "xit( title=\"${1:}\", body=${2:any}, labels=${3:any}, data=${4:{}} )" },
	{ "trigger": "appendToBuffer\tfn. (ColdBox Interceptor)", "contents": "appendToBuffer( str=${1:any} )" },
	{ "trigger": "clearBuffer\tfn. (ColdBox Interceptor)", "contents": "clearBuffer()" },
	{ "trigger": "getBufferObject\tfn. (ColdBox Interceptor)", "contents": "getBufferObject()" },
	{ "trigger": "getBufferString\tfn. (ColdBox Interceptor)", "contents": "getBufferString()" },
	{ "trigger": "getCachebox\tfn. (ColdBox Interceptor)", "contents": "getCachebox()" },
	{ "trigger": "getFlash\tfn. (ColdBox Interceptor)", "contents": "getFlash()" },
	{ "trigger": "getInterceptorService\tfn. (ColdBox Interceptor)", "contents": "getInterceptorService()" },
	{ "trigger": "getLog\tfn. (ColdBox Interceptor)", "contents": "getLog()" },
	{ "trigger": "getLogBox\tfn. (ColdBox Interceptor)", "contents": "getLogBox()" },
	{ "trigger": "getProperties\tfn. (ColdBox Interceptor)", "contents": "getProperties()" },
	{ "trigger": "getProperty\tfn. (ColdBox Interceptor)", "contents": "getProperty( property=${1:any}, defaultValue=${2:any} )" },
	{ "trigger": "getWirebox\tfn. (ColdBox Interceptor)", "contents": "getWirebox()" },
	{ "trigger": "propertyExists\tfn. (ColdBox Interceptor)", "contents": "propertyExists( property=${1:any} )" },
	{ "trigger": "setCachebox\tfn. (ColdBox Interceptor)", "contents": "setCachebox( cachebox=${1:any} )" },
	{ "trigger": "setFlash\tfn. (ColdBox Interceptor)", "contents": "setFlash( flash=${1:any} )" },
	{ "trigger": "setInterceptorService\tfn. (ColdBox Interceptor)", "contents": "setInterceptorService( interceptorService=${1:coldbox.system.services.InterceptorService} )" },
	{ "trigger": "setLog\tfn. (ColdBox Interceptor)", "contents": "setLog( log=${1:any} )" },
	{ "trigger": "setLogBox\tfn. (ColdBox Interceptor)", "contents": "setLogBox( logBox=${1:any} )" },
	{ "trigger": "setProperties\tfn. (ColdBox Interceptor)", "contents": "setProperties( properties=${1:{}} )" },
	{ "trigger": "setProperty\tfn. (ColdBox Interceptor)", "contents": "setProperty( property=${1:any}, value=${2:any} )" },
	{ "trigger": "setWirebox\tfn. (ColdBox Interceptor)", "contents": "setWirebox( wirebox=${1:any} )" },
	{ "trigger": "unregister\tfn. (ColdBox Interceptor)", "contents": "unregister( state=${1:any} )" },
	{ "trigger": "addAsset\tfn. (ColdBox FrameworkSuperType)", "contents": "addAsset( asset=${1:any} )" },
	{ "trigger": "announceInterception\tfn. (ColdBox FrameworkSuperType)", "contents": "announceInterception( state=${1:any}, interceptData=${2:{}}, async=${3:true,false}, asyncAll=${4:true,false}, asyncAllJoin=${5:true,false}, asyncPriority=${6:any}, asyncJoinTimeout=${7:numeric} )" },
	{ "trigger": "getCache\tfn. (ColdBox FrameworkSuperType)", "contents": "getCache( name=${1:any} )" },
	{ "trigger": "getController\tfn. (ColdBox FrameworkSuperType)", "contents": "getController()" },
	{ "trigger": "getDatasource\tfn. (ColdBox FrameworkSuperType)", "contents": "getDatasource( alias=${1:any} )" },
	{ "trigger": "getInstance\tfn. (ColdBox FrameworkSuperType)", "contents": "getInstance( name=${1:any}, dsl=${2:any}, initArguments=${3:any} )" },
	{ "trigger": "getInterceptor\tfn. (ColdBox FrameworkSuperType)", "contents": "getInterceptor( interceptorName=${1:any} )" },
	{ "trigger": "getModel\tfn. (ColdBox FrameworkSuperType)", "contents": "getModel( name=${1:any}, dsl=${2:any}, initArguments=${3:any} )" },
	{ "trigger": "getModuleConfig\tfn. (ColdBox FrameworkSuperType)", "contents": "getModuleConfig( module=${1:any} )" },
	{ "trigger": "getModuleSettings\tfn. (ColdBox FrameworkSuperType)", "contents": "getModuleSettings( module=${1:any}, setting=${2:any}, defaultValue=${3:any} )" },
	{ "trigger": "getMyPlugin\tfn. (ColdBox FrameworkSuperType)", "contents": "getMyPlugin()" },
	{ "trigger": "getPlugin\tfn. (ColdBox FrameworkSuperType)", "contents": "getPlugin()" },
	{ "trigger": "getRenderer\tfn. (ColdBox FrameworkSuperType)", "contents": "getRenderer()" },
	{ "trigger": "getRequestCollection\tfn. (ColdBox FrameworkSuperType)", "contents": "getRequestCollection( private=${1:true,false} )" },
	{ "trigger": "getRequestContext\tfn. (ColdBox FrameworkSuperType)", "contents": "getRequestContext()" },
	{ "trigger": "getSetting\tfn. (ColdBox FrameworkSuperType)", "contents": "getSetting( name=${1:any}, fwSetting=${2:true,false}, defaultValue=${3:any} )" },
	{ "trigger": "getSettingStructure\tfn. (ColdBox FrameworkSuperType)", "contents": "getSettingStructure( fwSetting=${1:true,false}, deepCopy=${2:true,false} )" },
	{ "trigger": "includeUDF\tfn. (ColdBox FrameworkSuperType)", "contents": "includeUDF( udflibrary=${1:any} )" },
	{ "trigger": "loadApplicationHelpers\tfn. (ColdBox FrameworkSuperType)", "contents": "loadApplicationHelpers()" },
	{ "trigger": "locateDirectoryPath\tfn. (ColdBox FrameworkSuperType)", "contents": "locateDirectoryPath( pathToCheck=${1:any} )" },
	{ "trigger": "locateFilePath\tfn. (ColdBox FrameworkSuperType)", "contents": "locateFilePath( pathToCheck=${1:any} )" },
	{ "trigger": "persistVariables\tfn. (ColdBox FrameworkSuperType)", "contents": "persistVariables( persist=${1:any}, persistStruct=${2:{}} )" },
	{ "trigger": "populateModel\tfn. (ColdBox FrameworkSuperType)", "contents": "populateModel( model=${1:any}, scope=${2:any}, trustedSetter=${3:true,false}, include=${4:any}, exclude=${5:any}, ignoreEmpty=${6:true,false}, nullEmptyInclude=${7:any}, nullEmptyExclude=${8:any}, composeRelationships=${9:true,false}, memento=${10:{}}, jsonstring=\"${11:}\", xml=\"${12:}\", qry=${13:query} )" },
	{ "trigger": "renderExternalView\tfn. (ColdBox FrameworkSuperType)", "contents": "renderExternalView( view=${1:any}, args=${2:{}}, cache=${3:true,false}, cacheTimeout=${4:any}, cacheLastAccessTimeout=${5:any}, cacheSuffix=${6:any}, cacheProvider=${7:any} )" },
	{ "trigger": "renderLayout\tfn. (ColdBox FrameworkSuperType)", "contents": "renderLayout( layout=${1:any}, module=${2:any}, view=${3:any}, args=${4:{}}, viewModule=${5:any}, prePostExempt=${6:true,false} )" },
	{ "trigger": "renderView\tfn. (ColdBox FrameworkSuperType)", "contents": "renderView( view=${1:any}, args=${2:{}}, module=${3:any}, cache=${4:true,false}, cacheTimeout=${5:any}, cacheLastAccessTimeout=${6:any}, cacheSuffix=${7:any}, cacheProvider=${8:any}, collection=${9:any}, collectionAs=${10:any}, collectionStartRow=${11:numeric}, collectionMaxRows=${12:numeric}, collectionDelim=${13:any}, prePostExempt=${14:true,false} )" },
	{ "trigger": "runEvent\tfn. (ColdBox FrameworkSuperType)", "contents": "runEvent( event=${1:any}, prePostExempt=${2:true,false}, private=${3:true,false}, defaultEvent=${4:true,false}, eventArguments=${5:{}}, cache=${6:true,false}, cacheTimeout=${7:any}, cacheLastAccessTimeout=${8:any}, cacheSuffix=${9:any}, cacheProvider=${10:any} )" },
	{ "trigger": "setController\tfn. (ColdBox FrameworkSuperType)", "contents": "setController( controller=${1:any} )" },
	{ "trigger": "setNextEvent\tfn. (ColdBox FrameworkSuperType)", "contents": "setNextEvent( event=${1:any}, URL=${2:any}, URI=${3:any}, queryString=${4:any}, persist=${5:any}, persistStruct=${6:{}}, addToken=${7:true,false}, ssl=${8:true,false}, baseURL=${9:any}, postProcessExempt=${10:true,false}, statusCode=${11:numeric} )" },
	{ "trigger": "setSetting\tfn. (ColdBox FrameworkSuperType)", "contents": "setSetting( name=${1:any}, value=${2:any} )" },
	{ "trigger": "settingExists\tfn. (ColdBox FrameworkSuperType)", "contents": "settingExists( name=${1:any}, fwSetting=${2:true,false} )" },
	{ "trigger": "_actionExists\tfn. (ColdBox EventHandler)", "contents": "_actionExists( action=${1:any} )" },
	{ "trigger": "_privateInvoker\tfn. (ColdBox EventHandler)", "contents": "_privateInvoker( method=${1:any}, argCollection=${2:any} )" },
	{ "trigger": "getCachebox\tfn. (ColdBox EventHandler)", "contents": "getCachebox()" },
	{ "trigger": "getFlash\tfn. (ColdBox EventHandler)", "contents": "getFlash()" },
	{ "trigger": "getLog\tfn. (ColdBox EventHandler)", "contents": "getLog()" },
	{ "trigger": "getLogBox\tfn. (ColdBox EventHandler)", "contents": "getLogBox()" },
	{ "trigger": "getWirebox\tfn. (ColdBox EventHandler)", "contents": "getWirebox()" },
	{ "trigger": "setCachebox\tfn. (ColdBox EventHandler)", "contents": "setCachebox( cachebox=${1:any} )" },
	{ "trigger": "setFlash\tfn. (ColdBox EventHandler)", "contents": "setFlash( flash=${1:any} )" },
	{ "trigger": "setLog\tfn. (ColdBox EventHandler)", "contents": "setLog( log=${1:any} )" },
	{ "trigger": "setLogBox\tfn. (ColdBox EventHandler)", "contents": "setLogBox( logBox=${1:any} )" },
	{ "trigger": "setWirebox\tfn. (ColdBox EventHandler)", "contents": "setWirebox( wirebox=${1:any} )" },
	// Functions for Scope: cachebox 
	{ "trigger": "cachebox.addCache\tfn. (cachebox)", "contents": "cachebox.addCache( cache=${1:any} )" },
	{ "trigger": "cachebox.addDefaultCache\tfn. (cachebox)", "contents": "cachebox.addDefaultCache( name=${1:any} )" },
	{ "trigger": "cachebox.cacheExists\tfn. (cachebox)", "contents": "cachebox.cacheExists( name=${1:any} )" },
	{ "trigger": "cachebox.clearAll\tfn. (cachebox)", "contents": "cachebox.clearAll()" },
	{ "trigger": "cachebox.configureEventManager\tfn. (cachebox)", "contents": "cachebox.configureEventManager()" },
	{ "trigger": "cachebox.configureLogBox\tfn. (cachebox)", "contents": "cachebox.configureLogBox( configPath=\"${1:}\" )" },
	{ "trigger": "cachebox.createCache\tfn. (cachebox)", "contents": "cachebox.createCache( name=${1:any}, provider=${2:any}, properties=${3:any} )" },
	{ "trigger": "cachebox.doScopeRegistration\tfn. (cachebox)", "contents": "cachebox.doScopeRegistration()" },
	{ "trigger": "cachebox.expireAll\tfn. (cachebox)", "contents": "cachebox.expireAll()" },
	{ "trigger": "cachebox.getCache\tfn. (cachebox)", "contents": "cachebox.getCache( name=${1:any} )" },
	{ "trigger": "cachebox.getCacheNames\tfn. (cachebox)", "contents": "cachebox.getCacheNames()" },
	{ "trigger": "cachebox.getCaches\tfn. (cachebox)", "contents": "cachebox.getCaches()" },
	{ "trigger": "cachebox.getColdbox\tfn. (cachebox)", "contents": "cachebox.getColdbox()" },
	{ "trigger": "cachebox.getConfig\tfn. (cachebox)", "contents": "cachebox.getConfig()" },
	{ "trigger": "cachebox.getDefaultCache\tfn. (cachebox)", "contents": "cachebox.getDefaultCache()" },
	{ "trigger": "cachebox.getEventManager\tfn. (cachebox)", "contents": "cachebox.getEventManager()" },
	{ "trigger": "cachebox.getFactoryID\tfn. (cachebox)", "contents": "cachebox.getFactoryID()" },
	{ "trigger": "cachebox.getLogBox\tfn. (cachebox)", "contents": "cachebox.getLogBox()" },
	{ "trigger": "cachebox.getScopeRegistration\tfn. (cachebox)", "contents": "cachebox.getScopeRegistration()" },
	{ "trigger": "cachebox.getUtil\tfn. (cachebox)", "contents": "cachebox.getUtil()" },
	{ "trigger": "cachebox.getVersion\tfn. (cachebox)", "contents": "cachebox.getVersion()" },
	{ "trigger": "cachebox.isColdBoxLinked\tfn. (cachebox)", "contents": "cachebox.isColdBoxLinked()" },
	{ "trigger": "cachebox.reapAll\tfn. (cachebox)", "contents": "cachebox.reapAll()" },
	{ "trigger": "cachebox.registerCache\tfn. (cachebox)", "contents": "cachebox.registerCache( cache=${1:any} )" },
	{ "trigger": "cachebox.registerListeners\tfn. (cachebox)", "contents": "cachebox.registerListeners()" },
	{ "trigger": "cachebox.removeAll\tfn. (cachebox)", "contents": "cachebox.removeAll()" },
	{ "trigger": "cachebox.removeCache\tfn. (cachebox)", "contents": "cachebox.removeCache( name=${1:any} )" },
	{ "trigger": "cachebox.removeFromScope\tfn. (cachebox)", "contents": "cachebox.removeFromScope()" },
	{ "trigger": "cachebox.replaceCache\tfn. (cachebox)", "contents": "cachebox.replaceCache( cache=${1:any}, decoratedCache=${2:any} )" },
	{ "trigger": "cachebox.shutdown\tfn. (cachebox)", "contents": "cachebox.shutdown()" },
	{ "trigger": "cachebox.shutdownCache\tfn. (cachebox)", "contents": "cachebox.shutdownCache( name=${1:any} )" },
	// END Functions for Scope: cachebox 

	// Functions for Scope: logbox 
	{ "trigger": "logbox.getAppendersMap\tfn. (logbox)", "contents": "logbox.getAppendersMap( appenders=${1:any} )" },
	{ "trigger": "logbox.getConfig\tfn. (logbox)", "contents": "logbox.getConfig()" },
	{ "trigger": "logbox.getCurrentAppenders\tfn. (logbox)", "contents": "logbox.getCurrentAppenders()" },
	{ "trigger": "logbox.getCurrentLoggers\tfn. (logbox)", "contents": "logbox.getCurrentLoggers()" },
	{ "trigger": "logbox.getLogger\tfn. (logbox)", "contents": "logbox.getLogger( category=${1:any} )" },
	{ "trigger": "logbox.getRootLogger\tfn. (logbox)", "contents": "logbox.getRootLogger()" },
	{ "trigger": "logbox.getUtil\tfn. (logbox)", "contents": "logbox.getUtil()" },
	{ "trigger": "logbox.getVersion\tfn. (logbox)", "contents": "logbox.getVersion()" },
	{ "trigger": "logbox.locateCategoryParentLogger\tfn. (logbox)", "contents": "logbox.locateCategoryParentLogger( category=${1:any} )" },
	{ "trigger": "logbox.registerAppender\tfn. (logbox)", "contents": "logbox.registerAppender( name=${1:any}, class=${2:any}, properties=${3:any}, layout=${4:any}, levelMin=${5:any}, levelMax=${6:any} )" },
	// END Functions for Scope: logbox 

	// Functions for Scope: binder 
	{ "trigger": "binder.asEagerInit\tfn. (binder)", "contents": "binder.asEagerInit()" },
	{ "trigger": "binder.asSingleton\tfn. (binder)", "contents": "binder.asSingleton()" },
	{ "trigger": "binder.bindAspect\tfn. (binder)", "contents": "binder.bindAspect( classes=${1:coldbox.system.aop.Matcher}, methods=${2:coldbox.system.aop.Matcher}, aspects=${3:any} )" },
	{ "trigger": "binder.cacheBox\tfn. (binder)", "contents": "binder.cacheBox( configFile=${1:any}, cacheFactory=${2:any}, enabled=${3:any}, classNamespace=${4:any} )" },
	{ "trigger": "binder.constructor\tfn. (binder)", "contents": "binder.constructor( constructor=${1:any} )" },
	{ "trigger": "binder.extraAttributes\tfn. (binder)", "contents": "binder.extraAttributes( data=${1:{}} )" },
	{ "trigger": "binder.getAppMapping\tfn. (binder)", "contents": "binder.getAppMapping()" },
	{ "trigger": "binder.getAspectBindings\tfn. (binder)", "contents": "binder.getAspectBindings()" },
	{ "trigger": "binder.getCacheBoxConfig\tfn. (binder)", "contents": "binder.getCacheBoxConfig()" },
	{ "trigger": "binder.getColdBox\tfn. (binder)", "contents": "binder.getColdBox()" },
	{ "trigger": "binder.getCurrentMapping\tfn. (binder)", "contents": "binder.getCurrentMapping()" },
	{ "trigger": "binder.getCustomDSL\tfn. (binder)", "contents": "binder.getCustomDSL()" },
	{ "trigger": "binder.getCustomScopes\tfn. (binder)", "contents": "binder.getCustomScopes()" },
	{ "trigger": "binder.getDefaults\tfn. (binder)", "contents": "binder.getDefaults()" },
	{ "trigger": "binder.getInjector\tfn. (binder)", "contents": "binder.getInjector()" },
	{ "trigger": "binder.getListeners\tfn. (binder)", "contents": "binder.getListeners()" },
	{ "trigger": "binder.getLogBoxConfig\tfn. (binder)", "contents": "binder.getLogBoxConfig()" },
	{ "trigger": "binder.getMapping\tfn. (binder)", "contents": "binder.getMapping( name=${1:any} )" },
	{ "trigger": "binder.getMappings\tfn. (binder)", "contents": "binder.getMappings()" },
	{ "trigger": "binder.getMemento\tfn. (binder)", "contents": "binder.getMemento()" },
	{ "trigger": "binder.getParentInjector\tfn. (binder)", "contents": "binder.getParentInjector()" },
	{ "trigger": "binder.getProperties\tfn. (binder)", "contents": "binder.getProperties()" },
	{ "trigger": "binder.getProperty\tfn. (binder)", "contents": "binder.getProperty( name=${1:any}, default=${2:any} )" },
	{ "trigger": "binder.getScanLocations\tfn. (binder)", "contents": "binder.getScanLocations()" },
	{ "trigger": "binder.getScopeRegistration\tfn. (binder)", "contents": "binder.getScopeRegistration()" },
	{ "trigger": "binder.getStopRecursions\tfn. (binder)", "contents": "binder.getStopRecursions()" },
	{ "trigger": "binder.inCacheBox\tfn. (binder)", "contents": "binder.inCacheBox( key=${1:any}, timeout=${2:any}, lastAccessTimeout=${3:any}, provider=${4:any} )" },
	{ "trigger": "binder.initArg\tfn. (binder)", "contents": "binder.initArg( name=${1:any}, ref=${2:any}, dsl=${3:any}, value=${4:any}, javaCast=${5:any}, required=${6:any} )" },
	{ "trigger": "binder.initWith\tfn. (binder)", "contents": "binder.initWith()" },
	{ "trigger": "binder.into\tfn. (binder)", "contents": "binder.into( scope=${1:any} )" },
	{ "trigger": "binder.listener\tfn. (binder)", "contents": "binder.listener( class=${1:any}, properties=${2:any}, name=${3:any} )" },
	{ "trigger": "binder.loadDataDSL\tfn. (binder)", "contents": "binder.loadDataDSL( rawDSL=${1:any} )" },
	{ "trigger": "binder.logBoxConfig\tfn. (binder)", "contents": "binder.logBoxConfig( config=${1:any} )" },
	{ "trigger": "binder.map\tfn. (binder)", "contents": "binder.map( alias=${1:any}, force=${2:any} )" },
	{ "trigger": "binder.mapAspect\tfn. (binder)", "contents": "binder.mapAspect( aspect=${1:any}, autoBinding=${2:true,false} )" },
	{ "trigger": "binder.mapDirectory\tfn. (binder)", "contents": "binder.mapDirectory( packagePath=${1:any}, include=${2:any}, exclude=${3:any}, influence=${4:any}, filter=${5:any}, namespace=${6:any}, prepend=${7:any} )" },
	{ "trigger": "binder.mapDSL\tfn. (binder)", "contents": "binder.mapDSL( namespace=${1:any}, path=${2:any} )" },
	{ "trigger": "binder.mapPath\tfn. (binder)", "contents": "binder.mapPath( path=${1:any}, namespace=${2:any}, prepend=${3:any}, force=${4:any} )" },
	{ "trigger": "binder.mappingExists\tfn. (binder)", "contents": "binder.mappingExists( name=${1:any} )" },
	{ "trigger": "binder.mapScope\tfn. (binder)", "contents": "binder.mapScope( annotation=${1:any}, path=${2:any} )" },
	{ "trigger": "binder.match\tfn. (binder)", "contents": "binder.match()" },
	{ "trigger": "binder.methodArg\tfn. (binder)", "contents": "binder.methodArg( name=${1:any}, ref=${2:any}, dsl=${3:any}, value=${4:any}, javaCast=${5:any} )" },
	{ "trigger": "binder.mixins\tfn. (binder)", "contents": "binder.mixins( mixins=${1:any} )" },
	{ "trigger": "binder.noAutowire\tfn. (binder)", "contents": "binder.noAutowire()" },
	{ "trigger": "binder.noInit\tfn. (binder)", "contents": "binder.noInit()" },
	{ "trigger": "binder.notThreadSafe\tfn. (binder)", "contents": "binder.notThreadSafe()" },
	{ "trigger": "binder.onDIComplete\tfn. (binder)", "contents": "binder.onDIComplete( methods=${1:any} )" },
	{ "trigger": "binder.parent\tfn. (binder)", "contents": "binder.parent( alias=${1:any} )" },
	{ "trigger": "binder.parentInjector\tfn. (binder)", "contents": "binder.parentInjector( injector=${1:any} )" },
	{ "trigger": "binder.processMappings\tfn. (binder)", "contents": "binder.processMappings()" },
	{ "trigger": "binder.property\tfn. (binder)", "contents": "binder.property( name=${1:any}, ref=${2:any}, dsl=${3:any}, value=${4:any}, javaCast=${5:any}, scope=${6:any}, required=${7:any} )" },
	{ "trigger": "binder.propertyExists\tfn. (binder)", "contents": "binder.propertyExists( name=${1:any} )" },
	{ "trigger": "binder.providerMethod\tfn. (binder)", "contents": "binder.providerMethod( method=${1:any}, mapping=${2:any} )" },
	{ "trigger": "binder.removeScanLocations\tfn. (binder)", "contents": "binder.removeScanLocations( locations=${1:any} )" },
	{ "trigger": "binder.reset\tfn. (binder)", "contents": "binder.reset()" },
	{ "trigger": "binder.scanLocations\tfn. (binder)", "contents": "binder.scanLocations( locations=${1:any} )" },
	{ "trigger": "binder.scopeRegistration\tfn. (binder)", "contents": "binder.scopeRegistration( enabled=${1:any}, scope=${2:any}, key=${3:any} )" },
	{ "trigger": "binder.setMapping\tfn. (binder)", "contents": "binder.setMapping( name=${1:any}, mapping=${2:any} )" },
	{ "trigger": "binder.setProperties\tfn. (binder)", "contents": "binder.setProperties( properties=${1:any} )" },
	{ "trigger": "binder.setProperty\tfn. (binder)", "contents": "binder.setProperty( name=${1:any}, value=${2:any} )" },
	{ "trigger": "binder.setter\tfn. (binder)", "contents": "binder.setter( name=${1:any}, ref=${2:any}, dsl=${3:any}, value=${4:any}, javaCast=${5:any}, argName=${6:any} )" },
	{ "trigger": "binder.stopRecursions\tfn. (binder)", "contents": "binder.stopRecursions( classes=${1:any} )" },
	{ "trigger": "binder.threadSafe\tfn. (binder)", "contents": "binder.threadSafe()" },
	{ "trigger": "binder.to\tfn. (binder)", "contents": "binder.to( path=${1:any} )" },
	{ "trigger": "binder.toDSL\tfn. (binder)", "contents": "binder.toDSL( dsl=${1:any} )" },
	{ "trigger": "binder.toFactoryMethod\tfn. (binder)", "contents": "binder.toFactoryMethod( factory=${1:any}, method=${2:any} )" },
	{ "trigger": "binder.toJava\tfn. (binder)", "contents": "binder.toJava( path=${1:any} )" },
	{ "trigger": "binder.toProvider\tfn. (binder)", "contents": "binder.toProvider( provider=${1:any} )" },
	{ "trigger": "binder.toRSS\tfn. (binder)", "contents": "binder.toRSS( path=${1:any} )" },
	{ "trigger": "binder.toValue\tfn. (binder)", "contents": "binder.toValue( value=${1:any} )" },
	{ "trigger": "binder.toWebservice\tfn. (binder)", "contents": "binder.toWebservice( path=${1:any} )" },
	{ "trigger": "binder.unMap\tfn. (binder)", "contents": "binder.unMap( name=${1:any} )" },
	{ "trigger": "binder.virtualInheritance\tfn. (binder)", "contents": "binder.virtualInheritance( mapping=${1:any} )" },
	{ "trigger": "binder.with\tfn. (binder)", "contents": "binder.with( alias=${1:any} )" },
	{ "trigger": "binder.withInfluence\tfn. (binder)", "contents": "binder.withInfluence( influenceClosure=${1:any} )" },
	// END Functions for Scope: binder 

	// Functions for Scope: log 
	{ "trigger": "log.addAppender\tfn. (log)", "contents": "log.addAppender( newAppender=${1:any} )" },
	{ "trigger": "log.appenderExists\tfn. (log)", "contents": "log.appenderExists( name=${1:any} )" },
	{ "trigger": "log.canDebug\tfn. (log)", "contents": "log.canDebug()" },
	{ "trigger": "log.canError\tfn. (log)", "contents": "log.canError()" },
	{ "trigger": "log.canFatal\tfn. (log)", "contents": "log.canFatal()" },
	{ "trigger": "log.canInfo\tfn. (log)", "contents": "log.canInfo()" },
	{ "trigger": "log.canLog\tfn. (log)", "contents": "log.canLog( level=${1:any} )" },
	{ "trigger": "log.canWarn\tfn. (log)", "contents": "log.canWarn()" },
	{ "trigger": "log.debug\tfn. (log)", "contents": "log.debug( message=${1:any}, extraInfo=${2:any} )" },
	{ "trigger": "log.error\tfn. (log)", "contents": "log.error( message=${1:any}, extraInfo=${2:any} )" },
	{ "trigger": "log.fatal\tfn. (log)", "contents": "log.fatal( message=${1:any}, extraInfo=${2:any} )" },
	{ "trigger": "log.getAppender\tfn. (log)", "contents": "log.getAppender( name=${1:any} )" },
	{ "trigger": "log.getAppenders\tfn. (log)", "contents": "log.getAppenders()" },
	{ "trigger": "log.getCategory\tfn. (log)", "contents": "log.getCategory()" },
	{ "trigger": "log.getlevelMax\tfn. (log)", "contents": "log.getlevelMax()" },
	{ "trigger": "log.getlevelMin\tfn. (log)", "contents": "log.getlevelMin()" },
	{ "trigger": "log.getRootLogger\tfn. (log)", "contents": "log.getRootLogger()" },
	{ "trigger": "log.hasAppenders\tfn. (log)", "contents": "log.hasAppenders()" },
	{ "trigger": "log.info\tfn. (log)", "contents": "log.info( message=${1:any}, extraInfo=${2:any} )" },
	{ "trigger": "log.logMessage\tfn. (log)", "contents": "log.logMessage( message=${1:any}, severity=${2:any}, extraInfo=${3:any} )" },
	{ "trigger": "log.removeAllAppenders\tfn. (log)", "contents": "log.removeAllAppenders()" },
	{ "trigger": "log.removeAppender\tfn. (log)", "contents": "log.removeAppender( name=${1:any} )" },
	{ "trigger": "log.setCategory\tfn. (log)", "contents": "log.setCategory( category=${1:any} )" },
	{ "trigger": "log.setLevelMax\tfn. (log)", "contents": "log.setLevelMax( levelMax=${1:any} )" },
	{ "trigger": "log.setLevelMin\tfn. (log)", "contents": "log.setLevelMin( levelMin=${1:any} )" },
	{ "trigger": "log.setRootLogger\tfn. (log)", "contents": "log.setRootLogger( RootLogger=${1:any} )" },
	{ "trigger": "log.warn\tfn. (log)", "contents": "log.warn( message=${1:any}, extraInfo=${2:any} )" },
	// END Functions for Scope: log 

	// Functions for Scope: assert 
	{ "trigger": "assert.assert\tfn. (assert)", "contents": "assert.assert( expression=${1:true,false}, message=${2:any} )" },
	{ "trigger": "assert.between\tfn. (assert)", "contents": "assert.between( actual=${1:any}, min=${2:any}, max=${3:any}, message=${4:any} )" },
	{ "trigger": "assert.closeTo\tfn. (assert)", "contents": "assert.closeTo( expected=${1:any}, actual=${2:any}, delta=${3:any}, datePart=${4:any}, message=${5:any} )" },
	{ "trigger": "assert.deepKey\tfn. (assert)", "contents": "assert.deepKey( target=${1:{}}, key=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.equalize\tfn. (assert)", "contents": "assert.equalize( expected=${1:any}, actual=${2:any} )" },
	{ "trigger": "assert.fail\tfn. (assert)", "contents": "assert.fail( message=${1:any} )" },
	{ "trigger": "assert.getIdentityHashCode\tfn. (assert)", "contents": "assert.getIdentityHashCode( target=${1:any} )" },
	{ "trigger": "assert.getStringName\tfn. (assert)", "contents": "assert.getStringName( obj=${1:any} )" },
	{ "trigger": "assert.getTargetLength\tfn. (assert)", "contents": "assert.getTargetLength( target=${1:any} )" },
	{ "trigger": "assert.includes\tfn. (assert)", "contents": "assert.includes( target=${1:any}, needle=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.includesWithCase\tfn. (assert)", "contents": "assert.includesWithCase( target=${1:any}, needle=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.instanceOf\tfn. (assert)", "contents": "assert.instanceOf( actual=${1:any}, typeName=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.isEmpty\tfn. (assert)", "contents": "assert.isEmpty( target=${1:any}, message=${2:any} )" },
	{ "trigger": "assert.isEqual\tfn. (assert)", "contents": "assert.isEqual( expected=${1:any}, actual=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.isEqualWithCase\tfn. (assert)", "contents": "assert.isEqualWithCase( expected=\"${1:}\", actual=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.isFalse\tfn. (assert)", "contents": "assert.isFalse( actual=${1:true,false}, message=${2:any} )" },
	{ "trigger": "assert.isGT\tfn. (assert)", "contents": "assert.isGT( actual=${1:any}, target=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.isGTE\tfn. (assert)", "contents": "assert.isGTE( actual=${1:any}, target=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.isLT\tfn. (assert)", "contents": "assert.isLT( actual=${1:any}, target=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.isLTE\tfn. (assert)", "contents": "assert.isLTE( actual=${1:any}, target=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.isNotEmpty\tfn. (assert)", "contents": "assert.isNotEmpty( target=${1:any}, message=${2:any} )" },
	{ "trigger": "assert.isNotEqual\tfn. (assert)", "contents": "assert.isNotEqual( expected=${1:any}, actual=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.isNotSameInstance\tfn. (assert)", "contents": "assert.isNotSameInstance( expected=${1:any}, actual=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.isSameInstance\tfn. (assert)", "contents": "assert.isSameInstance( expected=${1:any}, actual=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.isTrue\tfn. (assert)", "contents": "assert.isTrue( actual=${1:true,false}, message=${2:any} )" },
	{ "trigger": "assert.key\tfn. (assert)", "contents": "assert.key( target=${1:any}, key=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.lengthOf\tfn. (assert)", "contents": "assert.lengthOf( target=${1:any}, length=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.match\tfn. (assert)", "contents": "assert.match( actual=\"${1:}\", regex=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.matchWithCase\tfn. (assert)", "contents": "assert.matchWithCase( actual=\"${1:}\", regex=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.notDeepKey\tfn. (assert)", "contents": "assert.notDeepKey( target=${1:{}}, key=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.notIncludes\tfn. (assert)", "contents": "assert.notIncludes( target=${1:any}, needle=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.notIncludesWithCase\tfn. (assert)", "contents": "assert.notIncludesWithCase( target=${1:any}, needle=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.notInstanceOf\tfn. (assert)", "contents": "assert.notInstanceOf( actual=${1:any}, typeName=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.notKey\tfn. (assert)", "contents": "assert.notKey( target=${1:any}, key=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.notLengthOf\tfn. (assert)", "contents": "assert.notLengthOf( target=${1:any}, length=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.notMatch\tfn. (assert)", "contents": "assert.notMatch( actual=\"${1:}\", regex=\"${2:}\", message=${3:any} )" },
	{ "trigger": "assert.notNull\tfn. (assert)", "contents": "assert.notNull( actual=${1:any}, message=${2:any} )" },
	{ "trigger": "assert.notThrows\tfn. (assert)", "contents": "assert.notThrows( target=${1:any}, type=${2:any}, regex=${3:any}, message=${4:any} )" },
	{ "trigger": "assert.notTypeOf\tfn. (assert)", "contents": "assert.notTypeOf( type=\"${1:}\", actual=${2:any}, message=${3:any} )" },
	{ "trigger": "assert.null\tfn. (assert)", "contents": "assert.null( actual=${1:any}, message=${2:any} )" },
	{ "trigger": "assert.throws\tfn. (assert)", "contents": "assert.throws( target=${1:any}, type=${2:any}, regex=${3:any}, message=${4:any} )" },
	{ "trigger": "assert.typeOf\tfn. (assert)", "contents": "assert.typeOf( type=\"${1:}\", actual=${2:any}, message=${3:any} )" },
	// END Functions for Scope: assert 

	// Functions for Scope: wirebox 
	{ "trigger": "wirebox.autowire\tfn. (wirebox)", "contents": "wirebox.autowire( target=${1:any}, mapping=${2:any}, targetID=${3:any}, annotationCheck=${4:any} )" },
	{ "trigger": "wirebox.buildBinder\tfn. (wirebox)", "contents": "wirebox.buildBinder( binder=${1:any}, properties=${2:any} )" },
	{ "trigger": "wirebox.buildInstance\tfn. (wirebox)", "contents": "wirebox.buildInstance( mapping=${1:any}, initArguments=${2:any} )" },
	{ "trigger": "wirebox.clearSingletons\tfn. (wirebox)", "contents": "wirebox.clearSingletons()" },
	{ "trigger": "wirebox.configureCacheBox\tfn. (wirebox)", "contents": "wirebox.configureCacheBox( config=${1:any} )" },
	{ "trigger": "wirebox.configureEventManager\tfn. (wirebox)", "contents": "wirebox.configureEventManager()" },
	{ "trigger": "wirebox.configureLogBox\tfn. (wirebox)", "contents": "wirebox.configureLogBox( configPath=${1:any} )" },
	{ "trigger": "wirebox.containsInstance\tfn. (wirebox)", "contents": "wirebox.containsInstance( name=${1:any} )" },
	{ "trigger": "wirebox.doScopeRegistration\tfn. (wirebox)", "contents": "wirebox.doScopeRegistration()" },
	{ "trigger": "wirebox.getBinder\tfn. (wirebox)", "contents": "wirebox.getBinder()" },
	{ "trigger": "wirebox.getBuilder\tfn. (wirebox)", "contents": "wirebox.getBuilder()" },
	{ "trigger": "wirebox.getCacheBox\tfn. (wirebox)", "contents": "wirebox.getCacheBox()" },
	{ "trigger": "wirebox.getColdbox\tfn. (wirebox)", "contents": "wirebox.getColdbox()" },
	{ "trigger": "wirebox.getEventManager\tfn. (wirebox)", "contents": "wirebox.getEventManager()" },
	{ "trigger": "wirebox.getInjectorID\tfn. (wirebox)", "contents": "wirebox.getInjectorID()" },
	{ "trigger": "wirebox.getInstance\tfn. (wirebox)", "contents": "wirebox.getInstance( name=${1:any}, dsl=${2:any}, initArguments=${3:any}, targetObject=${4:any} )" },
	{ "trigger": "wirebox.getLogBox\tfn. (wirebox)", "contents": "wirebox.getLogBox()" },
	{ "trigger": "wirebox.getObjectPopulator\tfn. (wirebox)", "contents": "wirebox.getObjectPopulator()" },
	{ "trigger": "wirebox.getParent\tfn. (wirebox)", "contents": "wirebox.getParent()" },
	{ "trigger": "wirebox.getScope\tfn. (wirebox)", "contents": "wirebox.getScope( scope=${1:any} )" },
	{ "trigger": "wirebox.getScopeRegistration\tfn. (wirebox)", "contents": "wirebox.getScopeRegistration()" },
	{ "trigger": "wirebox.getScopes\tfn. (wirebox)", "contents": "wirebox.getScopes()" },
	{ "trigger": "wirebox.getScopeStorage\tfn. (wirebox)", "contents": "wirebox.getScopeStorage()" },
	{ "trigger": "wirebox.getUtil\tfn. (wirebox)", "contents": "wirebox.getUtil()" },
	{ "trigger": "wirebox.getVersion\tfn. (wirebox)", "contents": "wirebox.getVersion()" },
	{ "trigger": "wirebox.injectTarget\tfn. (wirebox)", "contents": "wirebox.injectTarget( target=${1:any}, propertyName=${2:any}, propertyObject=${3:any}, scope=${4:any}, argName=${5:any} )" },
	{ "trigger": "wirebox.isCacheBoxLinked\tfn. (wirebox)", "contents": "wirebox.isCacheBoxLinked()" },
	{ "trigger": "wirebox.isColdBoxLinked\tfn. (wirebox)", "contents": "wirebox.isColdBoxLinked()" },
	{ "trigger": "wirebox.locateInstance\tfn. (wirebox)", "contents": "wirebox.locateInstance( name=${1:any} )" },
	{ "trigger": "wirebox.locateScopedSelf\tfn. (wirebox)", "contents": "wirebox.locateScopedSelf()" },
	{ "trigger": "wirebox.processAfterCompleteDI\tfn. (wirebox)", "contents": "wirebox.processAfterCompleteDI( targetObject=${1:any}, DICompleteMethods=${2:any} )" },
	{ "trigger": "wirebox.processInjection\tfn. (wirebox)", "contents": "wirebox.processInjection( targetObject=${1:any}, DIData=${2:any}, targetID=${3:any} )" },
	{ "trigger": "wirebox.processMixins\tfn. (wirebox)", "contents": "wirebox.processMixins( targetObject=${1:any}, mapping=${2:any} )" },
	{ "trigger": "wirebox.processProviderMethods\tfn. (wirebox)", "contents": "wirebox.processProviderMethods( targetObject=${1:any}, mapping=${2:any} )" },
	{ "trigger": "wirebox.registerDSL\tfn. (wirebox)", "contents": "wirebox.registerDSL( namespace=${1:any}, path=${2:any} )" },
	{ "trigger": "wirebox.registerListeners\tfn. (wirebox)", "contents": "wirebox.registerListeners()" },
	{ "trigger": "wirebox.registerNewInstance\tfn. (wirebox)", "contents": "wirebox.registerNewInstance( name=${1:any}, instancePath=${2:any} )" },
	{ "trigger": "wirebox.registerScopes\tfn. (wirebox)", "contents": "wirebox.registerScopes()" },
	{ "trigger": "wirebox.removeFromScope\tfn. (wirebox)", "contents": "wirebox.removeFromScope()" },
	{ "trigger": "wirebox.setParent\tfn. (wirebox)", "contents": "wirebox.setParent( injector=${1:any} )" },
	{ "trigger": "wirebox.shutdown\tfn. (wirebox)", "contents": "wirebox.shutdown()" },
	// END Functions for Scope: wirebox 

	// Functions for Scope: flash 
	{ "trigger": "flash.clear\tfn. (flash)", "contents": "flash.clear()" },
	{ "trigger": "flash.clearFlash\tfn. (flash)", "contents": "flash.clearFlash()" },
	{ "trigger": "flash.discard\tfn. (flash)", "contents": "flash.discard( keys=\"${1:}\" )" },
	{ "trigger": "flash.exists\tfn. (flash)", "contents": "flash.exists( name=${1:any} )" },
	{ "trigger": "flash.flashExists\tfn. (flash)", "contents": "flash.flashExists()" },
	{ "trigger": "flash.get\tfn. (flash)", "contents": "flash.get( name=${1:any}, defaultValue=${2:any} )" },
	{ "trigger": "flash.getController\tfn. (flash)", "contents": "flash.getController()" },
	{ "trigger": "flash.getDefaults\tfn. (flash)", "contents": "flash.getDefaults()" },
	{ "trigger": "flash.getFlash\tfn. (flash)", "contents": "flash.getFlash()" },
	{ "trigger": "flash.getKeys\tfn. (flash)", "contents": "flash.getKeys()" },
	{ "trigger": "flash.getProperties\tfn. (flash)", "contents": "flash.getProperties()" },
	{ "trigger": "flash.getProperty\tfn. (flash)", "contents": "flash.getProperty( property=${1:any} )" },
	{ "trigger": "flash.getScope\tfn. (flash)", "contents": "flash.getScope()" },
	{ "trigger": "flash.getUtil\tfn. (flash)", "contents": "flash.getUtil()" },
	{ "trigger": "flash.inflateFlash\tfn. (flash)", "contents": "flash.inflateFlash()" },
	{ "trigger": "flash.isEmpty\tfn. (flash)", "contents": "flash.isEmpty()" },
	{ "trigger": "flash.keep\tfn. (flash)", "contents": "flash.keep( keys=\"${1:}\" )" },
	{ "trigger": "flash.persistRC\tfn. (flash)", "contents": "flash.persistRC( include=${1:any}, exclude=${2:any}, saveNow=${3:true,false} )" },
	{ "trigger": "flash.propertyExists\tfn. (flash)", "contents": "flash.propertyExists( property=${1:any} )" },
	{ "trigger": "flash.put\tfn. (flash)", "contents": "flash.put( name=\"${1:}\", value=${2:any}, saveNow=${3:true,false}, keep=${4:true,false}, inflateToRC=${5:true,false}, inflateToPRC=${6:true,false}, autoPurge=${7:true,false} )" },
	{ "trigger": "flash.putAll\tfn. (flash)", "contents": "flash.putAll( map=${1:{}}, saveNow=${2:true,false}, keep=${3:true,false}, inflateToRC=${4:true,false}, inflateToPRC=${5:true,false}, autoPurge=${6:true,false} )" },
	{ "trigger": "flash.remove\tfn. (flash)", "contents": "flash.remove( name=${1:any}, saveNow=${2:true,false} )" },
	{ "trigger": "flash.removeFlash\tfn. (flash)", "contents": "flash.removeFlash()" },
	{ "trigger": "flash.saveFlash\tfn. (flash)", "contents": "flash.saveFlash()" },
	{ "trigger": "flash.setController\tfn. (flash)", "contents": "flash.setController( controller=${1:any} )" },
	{ "trigger": "flash.setDefaults\tfn. (flash)", "contents": "flash.setDefaults( defaults=${1:any} )" },
	{ "trigger": "flash.setProperties\tfn. (flash)", "contents": "flash.setProperties( properties=${1:any} )" },
	{ "trigger": "flash.setProperty\tfn. (flash)", "contents": "flash.setProperty( property=${1:any}, value=${2:any} )" },
	{ "trigger": "flash.size\tfn. (flash)", "contents": "flash.size()" },
	{ "trigger": "flash.statusMarks\tfn. (flash)", "contents": "flash.statusMarks( keys=\"${1:}\", keep=${2:true,false} )" },
	// END Functions for Scope: flash 

	// Functions for Scope: event 
	{ "trigger": "event.buildLink\tfn. (event)", "contents": "event.buildLink( linkTo=${1:any}, translate=${2:true,false}, ssl=${3:true,false}, baseURL=${4:any}, queryString=${5:any} )" },
	{ "trigger": "event.clearCollection\tfn. (event)", "contents": "event.clearCollection( private=${1:true,false} )" },
	{ "trigger": "event.clearPrivateCollection\tfn. (event)", "contents": "event.clearPrivateCollection()" },
	{ "trigger": "event.collectionAppend\tfn. (event)", "contents": "event.collectionAppend( collection=${1:{}}, overwrite=${2:true,false}, private=${3:true,false} )" },
	{ "trigger": "event.getCollection\tfn. (event)", "contents": "event.getCollection( deepCopy=${1:true,false}, private=${2:true,false} )" },
	{ "trigger": "event.getContext\tfn. (event)", "contents": "event.getContext()" },
	{ "trigger": "event.getController\tfn. (event)", "contents": "event.getController()" },
	{ "trigger": "event.getCurrentAction\tfn. (event)", "contents": "event.getCurrentAction()" },
	{ "trigger": "event.getCurrentEvent\tfn. (event)", "contents": "event.getCurrentEvent()" },
	{ "trigger": "event.getCurrentHandler\tfn. (event)", "contents": "event.getCurrentHandler()" },
	{ "trigger": "event.getCurrentLayout\tfn. (event)", "contents": "event.getCurrentLayout()" },
	{ "trigger": "event.getCurrentLayoutModule\tfn. (event)", "contents": "event.getCurrentLayoutModule()" },
	{ "trigger": "event.getCurrentModule\tfn. (event)", "contents": "event.getCurrentModule()" },
	{ "trigger": "event.getCurrentRoute\tfn. (event)", "contents": "event.getCurrentRoute()" },
	{ "trigger": "event.getCurrentRoutedNamespace\tfn. (event)", "contents": "event.getCurrentRoutedNamespace()" },
	{ "trigger": "event.getCurrentRoutedURL\tfn. (event)", "contents": "event.getCurrentRoutedURL()" },
	{ "trigger": "event.getCurrentView\tfn. (event)", "contents": "event.getCurrentView()" },
	{ "trigger": "event.getCurrentViewArgs\tfn. (event)", "contents": "event.getCurrentViewArgs()" },
	{ "trigger": "event.getCurrentViewModule\tfn. (event)", "contents": "event.getCurrentViewModule()" },
	{ "trigger": "event.getDefaultLayout\tfn. (event)", "contents": "event.getDefaultLayout()" },
	{ "trigger": "event.getDefaultView\tfn. (event)", "contents": "event.getDefaultView()" },
	{ "trigger": "event.getEventCacheableEntry\tfn. (event)", "contents": "event.getEventCacheableEntry()" },
	{ "trigger": "event.getEventName\tfn. (event)", "contents": "event.getEventName()" },
	{ "trigger": "event.getFolderLayouts\tfn. (event)", "contents": "event.getFolderLayouts()" },
	{ "trigger": "event.getHTMLBaseURL\tfn. (event)", "contents": "event.getHTMLBaseURL()" },
	{ "trigger": "event.getHTTPBasicCredentials\tfn. (event)", "contents": "event.getHTTPBasicCredentials()" },
	{ "trigger": "event.getHTTPContent\tfn. (event)", "contents": "event.getHTTPContent( json=${1:true,false}, xml=${2:true,false} )" },
	{ "trigger": "event.getHTTPHeader\tfn. (event)", "contents": "event.getHTTPHeader( The header to get=${1:any}, defaultValue=${2:any} )" },
	{ "trigger": "event.getHTTPMethod\tfn. (event)", "contents": "event.getHTTPMethod()" },
	{ "trigger": "event.getMemento\tfn. (event)", "contents": "event.getMemento()" },
	{ "trigger": "event.getModuleRoot\tfn. (event)", "contents": "event.getModuleRoot( module=${1:any} )" },
	{ "trigger": "event.getPrivateCollection\tfn. (event)", "contents": "event.getPrivateCollection( deepCopy=${1:true,false} )" },
	{ "trigger": "event.getPrivateContext\tfn. (event)", "contents": "event.getPrivateContext()" },
	{ "trigger": "event.getPrivateSize\tfn. (event)", "contents": "event.getPrivateSize()" },
	{ "trigger": "event.getPrivateTrimValue\tfn. (event)", "contents": "event.getPrivateTrimValue( name=${1:any}, defaultValue=${2:any} )" },
	{ "trigger": "event.getPrivateValue\tfn. (event)", "contents": "event.getPrivateValue( name=${1:any}, defaultValue=${2:any} )" },
	{ "trigger": "event.getProperties\tfn. (event)", "contents": "event.getProperties()" },
	{ "trigger": "event.getRegisteredLayouts\tfn. (event)", "contents": "event.getRegisteredLayouts()" },
	{ "trigger": "event.getRenderData\tfn. (event)", "contents": "event.getRenderData()" },
	{ "trigger": "event.getRoutedStruct\tfn. (event)", "contents": "event.getRoutedStruct()" },
	{ "trigger": "event.getSelf\tfn. (event)", "contents": "event.getSelf()" },
	{ "trigger": "event.getSESBaseURL\tfn. (event)", "contents": "event.getSESBaseURL()" },
	{ "trigger": "event.getSize\tfn. (event)", "contents": "event.getSize( private=${1:true,false} )" },
	{ "trigger": "event.getTrimValue\tfn. (event)", "contents": "event.getTrimValue( name=${1:any}, defaultValue=${2:any}, private=${3:true,false} )" },
	{ "trigger": "event.getValue\tfn. (event)", "contents": "event.getValue( name=${1:any}, defaultValue=${2:any}, private=${3:true,false} )" },
	{ "trigger": "event.getViewCacheableEntry\tfn. (event)", "contents": "event.getViewCacheableEntry()" },
	{ "trigger": "event.getViewLayouts\tfn. (event)", "contents": "event.getViewLayouts()" },
	{ "trigger": "event.isAjax\tfn. (event)", "contents": "event.isAjax()" },
	{ "trigger": "event.isEventCacheable\tfn. (event)", "contents": "event.isEventCacheable()" },
	{ "trigger": "event.isNoExecution\tfn. (event)", "contents": "event.isNoExecution()" },
	{ "trigger": "event.isNoRender\tfn. (event)", "contents": "event.isNoRender()" },
	{ "trigger": "event.isProxyRequest\tfn. (event)", "contents": "event.isProxyRequest()" },
	{ "trigger": "event.isSES\tfn. (event)", "contents": "event.isSES()" },
	{ "trigger": "event.isSSL\tfn. (event)", "contents": "event.isSSL()" },
	{ "trigger": "event.isViewCacheable\tfn. (event)", "contents": "event.isViewCacheable()" },
	{ "trigger": "event.noExecution\tfn. (event)", "contents": "event.noExecution()" },
	{ "trigger": "event.noLayout\tfn. (event)", "contents": "event.noLayout()" },
	{ "trigger": "event.noRender\tfn. (event)", "contents": "event.noRender( remove=${1:true,false} )" },
	{ "trigger": "event.overrideEvent\tfn. (event)", "contents": "event.overrideEvent( event=${1:any} )" },
	{ "trigger": "event.paramPrivateValue\tfn. (event)", "contents": "event.paramPrivateValue( name=${1:any}, value=${2:any} )" },
	{ "trigger": "event.paramValue\tfn. (event)", "contents": "event.paramValue( name=${1:any}, value=${2:any}, private=${3:true,false} )" },
	{ "trigger": "event.privateCollectionAppend\tfn. (event)", "contents": "event.privateCollectionAppend( collection=${1:{}}, overwrite=${2:true,false} )" },
	{ "trigger": "event.privateValueExists\tfn. (event)", "contents": "event.privateValueExists( name=${1:any} )" },
	{ "trigger": "event.removeEventCacheableEntry\tfn. (event)", "contents": "event.removeEventCacheableEntry()" },
	{ "trigger": "event.removePrivateValue\tfn. (event)", "contents": "event.removePrivateValue( name=${1:any}, private=${2:true,false} )" },
	{ "trigger": "event.removeValue\tfn. (event)", "contents": "event.removeValue( name=${1:any}, private=${2:true,false} )" },
	{ "trigger": "event.renderData\tfn. (event)", "contents": "event.renderData( type=${1:any}, data=${2:any}, contentType=${3:any}, encoding=${4:any}, statusCode=${5:numeric}, statusText=${6:any}, location=${7:any}, jsonCallback=${8:any}, jsonQueryFormat=${9:any}, jsonAsText=${10:true,false}, xmlColumnList=${11:any}, xmlUseCDATA=${12:true,false}, xmlListDelimiter=${13:any}, xmlRootName=${14:any}, pdfArgs=${15:{}}, formats=${16:any}, formatsView=${17:any}, isBinary=${18:true,false} )" },
	{ "trigger": "event.renderWithFormats\tfn. (event)", "contents": "event.renderWithFormats()" },
	{ "trigger": "event.setContext\tfn. (event)", "contents": "event.setContext( context=${1:{}} )" },
	{ "trigger": "event.setController\tfn. (event)", "contents": "event.setController( controller=${1:any} )" },
	{ "trigger": "event.setDefaultLayout\tfn. (event)", "contents": "event.setDefaultLayout( defaultLayout=${1:any} )" },
	{ "trigger": "event.setDefaultView\tfn. (event)", "contents": "event.setDefaultView( defaultView=${1:any} )" },
	{ "trigger": "event.setEventCacheableEntry\tfn. (event)", "contents": "event.setEventCacheableEntry( cacheEntry=${1:{}} )" },
	{ "trigger": "event.setHTTPHeader\tfn. (event)", "contents": "event.setHTTPHeader( statusCode=${1:any}, statusText=${2:any}, name=${3:any}, value=${4:any} )" },
	{ "trigger": "event.setIsSES\tfn. (event)", "contents": "event.setIsSES( isSES=${1:true,false} )" },
	{ "trigger": "event.setLayout\tfn. (event)", "contents": "event.setLayout( name=${1:any}, module=${2:any} )" },
	{ "trigger": "event.setMemento\tfn. (event)", "contents": "event.setMemento( memento=${1:{}} )" },
	{ "trigger": "event.setPrivateContext\tfn. (event)", "contents": "event.setPrivateContext( privateContext=${1:{}} )" },
	{ "trigger": "event.setPrivateValue\tfn. (event)", "contents": "event.setPrivateValue( name=${1:any}, value=${2:any} )" },
	{ "trigger": "event.setProperties\tfn. (event)", "contents": "event.setProperties( properties=${1:any} )" },
	{ "trigger": "event.setProxyRequest\tfn. (event)", "contents": "event.setProxyRequest()" },
	{ "trigger": "event.setRoutedStruct\tfn. (event)", "contents": "event.setRoutedStruct( routedStruct=${1:{}} )" },
	{ "trigger": "event.setSESBaseURL\tfn. (event)", "contents": "event.setSESBaseURL( sesBaseURL=\"${1:}\" )" },
	{ "trigger": "event.setValue\tfn. (event)", "contents": "event.setValue( name=${1:any}, value=${2:any}, private=${3:true,false} )" },
	{ "trigger": "event.setView\tfn. (event)", "contents": "event.setView( view=${1:any}, args=${2:{}}, layout=${3:any}, module=${4:any}, noLayout=${5:true,false}, cache=${6:true,false}, cacheTimeout=${7:any}, cacheLastAccessTimeout=${8:any}, cacheSuffix=${9:any}, cacheProvider=${10:any} )" },
	{ "trigger": "event.setViewCacheableEntry\tfn. (event)", "contents": "event.setViewCacheableEntry( cacheEntry=${1:{}} )" },
	{ "trigger": "event.valueExists\tfn. (event)", "contents": "event.valueExists( name=${1:any}, private=${2:true,false} )" },
	// END Functions for Scope: event 

	// Functions for Scope: html 
	{ "trigger": "html.$htmlhead\tfn. (html)", "contents": "html.$htmlhead( content=\"${1:}\" )" },
	{ "trigger": "html.addAsset\tfn. (html)", "contents": "html.addAsset( asset=${1:any}, sendToHeader=${2:true,false}, async=${3:true,false}, defer=${4:true,false} )" },
	{ "trigger": "html.addJSContent\tfn. (html)", "contents": "html.addJSContent( content=${1:any}, addToHeader=${2:true,false} )" },
	{ "trigger": "html.addStyleContent\tfn. (html)", "contents": "html.addStyleContent( content=${1:any}, addToHeader=${2:true,false} )" },
	{ "trigger": "html.anchor\tfn. (html)", "contents": "html.anchor( name=${1:any}, text=${2:any}, data=${3:{}} )" },
	{ "trigger": "html.arrayToTable\tfn. (html)", "contents": "html.arrayToTable( data=${1:any}, includes=\"${2:}\", excludes=\"${3:}\", buffer=${4:any} )" },
	{ "trigger": "html.audio\tfn. (html)", "contents": "html.audio( src=${1:any}, autoplay=${2:true,false}, controls=${3:true,false}, loop=${4:true,false}, preLoad=${5:true,false}, noBaseURL=${6:true,false}, name=\"${7:}\", data=${8:{}} )" },
	{ "trigger": "html.autoDiscoveryLink\tfn. (html)", "contents": "html.autoDiscoveryLink( type=\"${1:}\", href=${2:any}, rel=${3:any}, title=${4:any}, data=${5:{}} )" },
	{ "trigger": "html.bindValue\tfn. (html)", "contents": "html.bindValue( args=${1:any} )" },
	{ "trigger": "html.br\tfn. (html)", "contents": "html.br( count=${1:numeric} )" },
	{ "trigger": "html.button\tfn. (html)", "contents": "html.button( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, type=\"${4:}\", wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", data=${9:{}}, labelClass=\"${10:}\" )" },
	{ "trigger": "html.canvas\tfn. (html)", "contents": "html.canvas( id=\"${1:}\", width=\"${2:}\", height=\"${3:}\", data=${4:{}} )" },
	{ "trigger": "html.checkBox\tfn. (html)", "contents": "html.checkBox( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, checked=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.docType\tfn. (html)", "contents": "html.docType( type=\"${1:}\" )" },
	{ "trigger": "html.emailField\tfn. (html)", "contents": "html.emailField( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, readonly=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.endFieldset\tfn. (html)", "contents": "html.endFieldset()" },
	{ "trigger": "html.endForm\tfn. (html)", "contents": "html.endForm()" },
	{ "trigger": "html.entityFields\tfn. (html)", "contents": "html.entityFields( entity=${1:any}, groupWrapper=\"${2:}\", fieldwrapper=${3:any}, labelwrapper=${4:any}, labelClass=\"${5:}\", textareas=${6:any}, booleanSelect=${7:true,false}, showRelations=${8:true,false}, manytoone=${9:{}}, manytomany=${10:{}} )" },
	{ "trigger": "html.fileField\tfn. (html)", "contents": "html.fileField( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, readonly=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\" )" },
	{ "trigger": "html.flattenAttributes\tfn. (html)", "contents": "html.flattenAttributes( target=${1:{}}, excludes=${2:any}, buffer=${3:any} )" },
	{ "trigger": "html.getColumnArray\tfn. (html)", "contents": "html.getColumnArray( qry=${1:query}, columnName=\"${2:}\" )" },
	{ "trigger": "html.heading\tfn. (html)", "contents": "html.heading( title=\"${1:}\", size=${2:numeric} )" },
	{ "trigger": "html.hiddenField\tfn. (html)", "contents": "html.hiddenField( name=\"${1:}\", value=\"${2:}\", wrapper=\"${3:}\", groupWrapper=\"${4:}\", label=\"${5:}\", labelwrapper=\"${6:}\", labelClass=\"${7:}\", bind=${8:any}, bindProperty=${9:any} )" },
	{ "trigger": "html.href\tfn. (html)", "contents": "html.href( href=${1:any}, text=${2:any}, queryString=${3:any}, title=${4:any}, target=${5:any}, ssl=${6:true,false}, noBaseURL=${7:true,false}, data=${8:{}} )" },
	{ "trigger": "html.imageButton\tfn. (html)", "contents": "html.imageButton( src=\"${1:}\", name=\"${2:}\", disabled=${3:true,false}, wrapper=\"${4:}\", groupWrapper=\"${5:}\", label=\"${6:}\", labelwrapper=\"${7:}\", labelClass=\"${8:}\" )" },
	{ "trigger": "html.img\tfn. (html)", "contents": "html.img( src=${1:any}, alt=\"${2:}\", class=\"${3:}\", width=\"${4:}\", height=\"${5:}\", title=\"${6:}\", rel=\"${7:}\", name=\"${8:}\", noBaseURL=${9:true,false}, data=${10:{}} )" },
	{ "trigger": "html.inputField\tfn. (html)", "contents": "html.inputField( type=\"${1:}\", name=\"${2:}\", value=\"${3:}\", disabled=${4:true,false}, checked=${5:true,false}, readonly=${6:true,false}, wrapper=\"${7:}\", groupWrapper=\"${8:}\", label=\"${9:}\", labelwrapper=\"${10:}\", labelClass=\"${11:}\", bind=${12:any}, bindProperty=${13:any}, data=${14:{}} )" },
	{ "trigger": "html.label\tfn. (html)", "contents": "html.label( field=\"${1:}\", content=\"${2:}\", wrapper=\"${3:}\", data=${4:{}}, class=\"${5:}\" )" },
	{ "trigger": "html.link\tfn. (html)", "contents": "html.link( href=${1:any}, rel=${2:any}, type=${3:any}, title=${4:any}, media=${5:any}, noBaseURL=${6:true,false}, charset=${7:any}, sendToHeader=${8:true,false}, data=${9:{}} )" },
	{ "trigger": "html.makePretty\tfn. (html)", "contents": "html.makePretty( text=${1:any} )" },
	{ "trigger": "html.meta\tfn. (html)", "contents": "html.meta( name=${1:any}, content=${2:any}, type=\"${3:}\", sendToHeader=${4:true,false} )" },
	{ "trigger": "html.nbs\tfn. (html)", "contents": "html.nbs( count=${1:numeric} )" },
	{ "trigger": "html.normalizeID\tfn. (html)", "contents": "html.normalizeID( args=${1:any} )" },
	{ "trigger": "html.ol\tfn. (html)", "contents": "html.ol( values=${1:any}, column=\"${2:}\" )" },
	{ "trigger": "html.onMissingMethod\tfn. (html)", "contents": "html.onMissingMethod( missingMethodName=${1:any}, missingMethodArguments=${2:any} )" },
	{ "trigger": "html.options\tfn. (html)", "contents": "html.options( values=${1:any}, column=${2:any}, nameColumn=${3:any}, selectedIndex=${4:any}, selectedValue=${5:any} )" },
	{ "trigger": "html.passIncludeExclude\tfn. (html)", "contents": "html.passIncludeExclude( value=\"${1:}\", includes=\"${2:}\", excludes=\"${3:}\" )" },
	{ "trigger": "html.passwordField\tfn. (html)", "contents": "html.passwordField( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, readonly=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.prepareBaseLink\tfn. (html)", "contents": "html.prepareBaseLink( noBaseURL=${1:any}, src=${2:any} )" },
	{ "trigger": "html.queryToTable\tfn. (html)", "contents": "html.queryToTable( data=${1:any}, includes=\"${2:}\", excludes=\"${3:}\", buffer=${4:any} )" },
	{ "trigger": "html.radioButton\tfn. (html)", "contents": "html.radioButton( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, checked=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.resetButton\tfn. (html)", "contents": "html.resetButton( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, wrapper=\"${4:}\", groupWrapper=\"${5:}\", label=\"${6:}\", labelwrapper=\"${7:}\", labelClass=\"${8:}\" )" },
	{ "trigger": "html.select\tfn. (html)", "contents": "html.select( name=\"${1:}\", options=${2:any}, column=\"${3:}\", nameColumn=\"${4:}\", selectedIndex=${5:numeric}, selectedValue=\"${6:}\", bind=${7:any}, bindProperty=${8:any}, disabled=${9:true,false}, multiple=${10:true,false}, wrapper=\"${11:}\", groupWrapper=\"${12:}\", label=\"${13:}\", labelwrapper=\"${14:}\", data=${15:{}}, labelClass=\"${16:}\" )" },
	{ "trigger": "html.slugify\tfn. (html)", "contents": "html.slugify( str=\"${1:}\", maxLength=${2:numeric}, allow=\"${3:}\" )" },
	{ "trigger": "html.startFieldset\tfn. (html)", "contents": "html.startFieldset( legend=\"${1:}\", data=${2:{}} )" },
	{ "trigger": "html.startForm\tfn. (html)", "contents": "html.startForm( action=\"${1:}\", name=\"${2:}\", method=\"${3:}\", multipart=${4:true,false}, ssl=${5:true,false}, noBaseURL=${6:true,false}, data=${7:{}} )" },
	{ "trigger": "html.submitButton\tfn. (html)", "contents": "html.submitButton( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, wrapper=\"${4:}\", groupWrapper=\"${5:}\", label=\"${6:}\", labelwrapper=\"${7:}\", labelClass=\"${8:}\" )" },
	{ "trigger": "html.table\tfn. (html)", "contents": "html.table( data=${1:any}, includes=\"${2:}\", excludes=\"${3:}\", name=\"${4:}\" )" },
	{ "trigger": "html.tag\tfn. (html)", "contents": "html.tag( tag=\"${1:}\", content=\"${2:}\", data=${3:{}} )" },
	{ "trigger": "html.textArea\tfn. (html)", "contents": "html.textArea( name=\"${1:}\", cols=${2:numeric}, rows=${3:numeric}, value=\"${4:}\", disabled=${5:true,false}, readonly=${6:true,false}, wrapper=\"${7:}\", groupWrapper=\"${8:}\", label=\"${9:}\", labelwrapper=\"${10:}\", labelClass=\"${11:}\", bind=${12:any}, bindProperty=${13:any}, data=${14:{}} )" },
	{ "trigger": "html.textField\tfn. (html)", "contents": "html.textField( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, readonly=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.toHTMLList\tfn. (html)", "contents": "html.toHTMLList( tag=\"${1:}\", values=${2:any}, column=\"${3:}\", data=${4:{}} )" },
	{ "trigger": "html.ul\tfn. (html)", "contents": "html.ul( values=${1:any}, column=\"${2:}\" )" },
	{ "trigger": "html.urlfield\tfn. (html)", "contents": "html.urlfield( name=\"${1:}\", value=\"${2:}\", disabled=${3:true,false}, readonly=${4:true,false}, wrapper=\"${5:}\", groupWrapper=\"${6:}\", label=\"${7:}\", labelwrapper=\"${8:}\", labelClass=\"${9:}\", bind=${10:any}, bindProperty=${11:any} )" },
	{ "trigger": "html.video\tfn. (html)", "contents": "html.video( src=${1:any}, width=\"${2:}\", height=\"${3:}\", poster=\"${4:}\", autoplay=${5:true,false}, controls=${6:true,false}, loop=${7:true,false}, preload=${8:true,false}, noBaseURL=${9:true,false}, name=\"${10:}\", data=${11:{}} )" },
	{ "trigger": "html.wrapTag\tfn. (html)", "contents": "html.wrapTag( buffer=${1:any}, tag=${2:any}, end=${3:any} )" },
	// END Functions for Scope: html 

	// Functions for Scope: controller 
	{ "trigger": "controller._runEvent\tfn. (controller)", "contents": "controller._runEvent( event=${1:any}, prePostExempt=${2:true,false}, private=${3:true,false}, defaultEvent=${4:true,false}, eventArguments=${5:{}} )" },
	{ "trigger": "controller.getAppHash\tfn. (controller)", "contents": "controller.getAppHash()" },
	{ "trigger": "controller.getAppKey\tfn. (controller)", "contents": "controller.getAppKey()" },
	{ "trigger": "controller.getAppRootPath\tfn. (controller)", "contents": "controller.getAppRootPath()" },
	{ "trigger": "controller.getCache\tfn. (controller)", "contents": "controller.getCache( cacheName=${1:any} )" },
	{ "trigger": "controller.getCachebox\tfn. (controller)", "contents": "controller.getCachebox()" },
	{ "trigger": "controller.getCFMLEngine\tfn. (controller)", "contents": "controller.getCFMLEngine()" },
	{ "trigger": "controller.getColdboxInitiated\tfn. (controller)", "contents": "controller.getColdboxInitiated()" },
	{ "trigger": "controller.getColdboxSettings\tfn. (controller)", "contents": "controller.getColdboxSettings()" },
	{ "trigger": "controller.getConfigSettings\tfn. (controller)", "contents": "controller.getConfigSettings()" },
	{ "trigger": "controller.getDataMarshaller\tfn. (controller)", "contents": "controller.getDataMarshaller()" },
	{ "trigger": "controller.getHandlerService\tfn. (controller)", "contents": "controller.getHandlerService()" },
	{ "trigger": "controller.getInterceptorService\tfn. (controller)", "contents": "controller.getInterceptorService()" },
	{ "trigger": "controller.getLoaderService\tfn. (controller)", "contents": "controller.getLoaderService()" },
	{ "trigger": "controller.getLog\tfn. (controller)", "contents": "controller.getLog()" },
	{ "trigger": "controller.getLogbox\tfn. (controller)", "contents": "controller.getLogbox()" },
	{ "trigger": "controller.getMemento\tfn. (controller)", "contents": "controller.getMemento()" },
	{ "trigger": "controller.getModuleService\tfn. (controller)", "contents": "controller.getModuleService()" },
	{ "trigger": "controller.getPlugin\tfn. (controller)", "contents": "controller.getPlugin()" },
	{ "trigger": "controller.getRenderer\tfn. (controller)", "contents": "controller.getRenderer()" },
	{ "trigger": "controller.getRequestService\tfn. (controller)", "contents": "controller.getRequestService()" },
	{ "trigger": "controller.getServices\tfn. (controller)", "contents": "controller.getServices()" },
	{ "trigger": "controller.getSetting\tfn. (controller)", "contents": "controller.getSetting( name=${1:any}, fwSetting=${2:true,false}, defaultValue=${3:any} )" },
	{ "trigger": "controller.getSettingStructure\tfn. (controller)", "contents": "controller.getSettingStructure( fwSetting=${1:true,false}, deepCopyFlag=${2:true,false} )" },
	{ "trigger": "controller.getUtil\tfn. (controller)", "contents": "controller.getUtil()" },
	{ "trigger": "controller.getWirebox\tfn. (controller)", "contents": "controller.getWirebox()" },
	{ "trigger": "controller.invoker\tfn. (controller)", "contents": "controller.invoker( target=${1:any}, method=${2:any}, argCollection=${3:{}}, private=${4:true,false} )" },
	{ "trigger": "controller.loadColdBoxSettings\tfn. (controller)", "contents": "controller.loadColdBoxSettings()" },
	{ "trigger": "controller.locateDirectoryPath\tfn. (controller)", "contents": "controller.locateDirectoryPath( pathToCheck=${1:any} )" },
	{ "trigger": "controller.locateFilePath\tfn. (controller)", "contents": "controller.locateFilePath( pathToCheck=${1:any} )" },
	{ "trigger": "controller.persistVariables\tfn. (controller)", "contents": "controller.persistVariables( persist=${1:any}, persistStruct=${2:{}} )" },
	{ "trigger": "controller.runEvent\tfn. (controller)", "contents": "controller.runEvent( event=${1:any}, prePostExempt=${2:true,false}, private=${3:true,false}, defaultEvent=${4:true,false}, eventArguments=${5:{}}, cache=${6:true,false}, cacheTimeout=${7:any}, cacheLastAccessTimeout=${8:any}, cacheSuffix=${9:any}, cacheProvider=${10:any} )" },
	{ "trigger": "controller.sendRelocation\tfn. (controller)", "contents": "controller.sendRelocation( URL=${1:any}, addToken=${2:true,false}, statusCode=${3:any} )" },
	{ "trigger": "controller.setAppHash\tfn. (controller)", "contents": "controller.setAppHash( appHash=${1:any} )" },
	{ "trigger": "controller.setAppKey\tfn. (controller)", "contents": "controller.setAppKey( appKey=${1:any} )" },
	{ "trigger": "controller.setAppRootPath\tfn. (controller)", "contents": "controller.setAppRootPath( appRootPath=${1:any} )" },
	{ "trigger": "controller.setCachebox\tfn. (controller)", "contents": "controller.setCachebox( cachebox=${1:any} )" },
	{ "trigger": "controller.setCFMLEngine\tfn. (controller)", "contents": "controller.setCFMLEngine( CFMLEngine=${1:any} )" },
	{ "trigger": "controller.setColdboxInitiated\tfn. (controller)", "contents": "controller.setColdboxInitiated( coldboxInitiated=${1:true,false} )" },
	{ "trigger": "controller.setColdboxSettings\tfn. (controller)", "contents": "controller.setColdboxSettings( coldboxSettings=${1:{}} )" },
	{ "trigger": "controller.setConfigSettings\tfn. (controller)", "contents": "controller.setConfigSettings( configSettings=${1:{}} )" },
	{ "trigger": "controller.setLog\tfn. (controller)", "contents": "controller.setLog( log=${1:any} )" },
	{ "trigger": "controller.setLogbox\tfn. (controller)", "contents": "controller.setLogbox( logbox=${1:any} )" },
	{ "trigger": "controller.setNextEvent\tfn. (controller)", "contents": "controller.setNextEvent( event=${1:any}, queryString=${2:any}, addToken=${3:true,false}, persist=${4:any}, persistStruct=${5:{}}, baseURL=${6:any}, postProcessExempt=${7:true,false}, URL=${8:any}, URI=${9:any}, statusCode=${10:numeric} )" },
	{ "trigger": "controller.setServices\tfn. (controller)", "contents": "controller.setServices( services=${1:any} )" },
	{ "trigger": "controller.setSetting\tfn. (controller)", "contents": "controller.setSetting( name=${1:any}, value=${2:any} )" },
	{ "trigger": "controller.settingExists\tfn. (controller)", "contents": "controller.settingExists( name=${1:any}, fwSetting=${2:true,false} )" },
	{ "trigger": "controller.setUtil\tfn. (controller)", "contents": "controller.setUtil( util=${1:any} )" },
	{ "trigger": "controller.setWirebox\tfn. (controller)", "contents": "controller.setWirebox( wirebox=${1:any} )" },
	{ "trigger": "controller.updateSSL\tfn. (controller)", "contents": "controller.updateSSL( inURL=${1:any}, ssl=${2:any} )" },
	{ "trigger": "controller.validateAction\tfn. (controller)", "contents": "controller.validateAction( action=${1:any}, inclusion=${2:any}, exclusion=${3:any} )" }
	// END Functions for Scope: controller 

    ]
}

