<snippet>
<content><![CDATA[
/**
 * ColdBox Configuration File
 */
component{
	
	/**
	 * Configure the ColdBox Application
	 */
	function configure(){

		// coldbox directives
		coldbox = {
			// Application Setup
			appName 				= getSystemSetting( "APPNAME", "${1:Your App Name}" ),
			
			// Development Settings
			reinitPassword			= "",
			handlersIndexAutoReload = true,

			// Implicit Events
			defaultEvent			= "",
			requestStartHandler		= "Main.onRequestStart",
			requestEndHandler		= "",
			applicationStartHandler = "Main.onAppInit",
			applicationEndHandler	= "",
			sessionStartHandler 	= "",
			sessionEndHandler		= "",
			missingTemplateHandler	= "",

			// Extension Points
			applicationHelper 			= "includes/helpers/ApplicationHelper.cfm",
			viewsHelper					= "",
			modulesExternalLocation		= [],
			viewsExternalLocation		= "",
			layoutsExternalLocation 	= "",
			handlersExternalLocation  	= "",
			requestContextDecorator 	= "",
			controllerDecorator			= "",

			// Error/Exception Handling
			invalidHTTPMethodHandler 	= "",
			exceptionHandler			= "main.onException",
			invalidEventHandler			= "",
			customErrorTemplate			= "",

			// Application Aspects
			handlerCaching 			= false,
			eventCaching			= false,
			viewCaching				= false,
			// Will automatically do a mapDirectory() on your `models` for you.
			autoMapModels			= true
		};

		// custom settings
		settings = {

		};

		// environment settings, create a detectEnvironment() method to detect it yourself.
		// create a function with the name of the environment so it can be executed if that environment is detected
		// the value of the environment is a list of regex patterns to match the cgi.http_host.
		environments = {
			development = "^localhost,127\.0\.0\.1"
		};

		// Module Directives
		modules = {
			// An array of modules names to load, empty means all of them
			include = [],
			// An array of modules names to NOT load, empty means none
			exclude = []
		};

		//LogBox DSL
		logBox = {
			// Define Appenders
			appenders = {
				console = { class="coldbox.system.logging.appenders.ConsoleAppender" }
			},
			// Root Logger
			root = { levelmax="INFO", appenders="*" },
			// Implicit Level Categories
			info = [ "coldbox.system" ]
		};

		/ Layout Settings
		layoutSettings = {
			defaultLayout = "",
			defaultView   = ""
		};

		// Interceptor Settings
		interceptorSettings = {
			customInterceptionPoints = ""
		};

		// Register interceptors as an array, we need order
		interceptors = [
		];

		// Module Settings
		moduleSettings = {

		};

		/*
			// flash scope configuration
			flash = {
				scope = "session,client,cluster,ColdboxCache,or full path",
				properties = {}, // constructor properties for the flash scope implementation
				inflateToRC = true, // automatically inflate flash data into the RC scope
				inflateToPRC = false, // automatically inflate flash data into the PRC scope
				autoPurge = true, // automatically purge flash data for you
				autoSave = true // automatically save flash scopes at end of a request and on relocations.
			};

			//Conventions
			conventions = {
				handlersLocation = "handlers",
				pluginsLocation  = "plugins",
				viewsLocation 	 = "views",
				layoutsLocation  = "layouts",
				modelsLocation 	 = "model",
				eventAction 	 = "index"
			};

		*/

	}

	/**
	 * Dev environment
	 */
	function development(){
		coldbox.customErrorTemplate = "/coldbox/system/includes/BugReport.cfm";
	}
	
}
]]></content>
	<tabTrigger>config</tabTrigger>
	<scope>source,text</scope>
	<description>ColdBox Configuration File (Coldbox.cfc)</description>
</snippet>